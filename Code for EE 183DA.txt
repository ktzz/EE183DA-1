syms d1 d3 theta2 theta4 theta d alpha a
K = sym('K', [4 4]);
ee = zeros(4,1);
ee(4) = 1;
K(1,1) = cos(theta);
K(1,2) = -sin(theta);
K(1,3) = 0;
K(1,4) = a;
K(2,1) = sin(theta)*cos(alpha);
K(2,2) = cos(theta)*cos(alpha);
K(2,3) = -sin(alpha);
K(2,4) = -d*sin(alpha);
K(3,1) = sin(theta)*sin(alpha);
K(3,2) = cos(theta)*sin(alpha);
K(3,3) = cos(alpha);
K(3,4) = d*cos(alpha);
K(4,1) = 0;
K(4,2) = 0;
K(4,3) = 0;
K(4,4) = 1;
E = K;
D = K;
C = K;
B = K;
A = K;
E = subs(E,theta,-pi/2);
E = subs(E,alpha,pi/2);
E = subs(E,a,0.1);
E = subs(E,d,0);
D = subs(D,alpha,pi/2);
D = subs(D,a,0);
D = subs(D,theta,theta4);
D = subs(D,d,0);
C = subs(C,alpha,-pi/2);
C = subs(C,a,0);
C = subs(C,theta,0);
C = subs(C,d,d3);
B = subs(B,alpha,-pi/2);
B = subs(B,a,0);
B = subs(B,theta,theta2);
B = subs(B,d,0);
A = subs(A,alpha,0);
A = subs(A,a,0);
A = subs(A,theta,pi/2);
A = subs(A,d,d1);
eeW = A * B * C * D * E * ee;
transformationM = A * B * C * D * E;

% Inverse Kinematics
desiredSpace = ones(4,1);
desiredSpace(1) = 0;
q0(1) = 1;
q0(2) = 1;
q0(3) = -pi/2;
q0(4) = pi/2;
q(1) = d1;
q(3) = d3;
q(2) = theta2;
q(4) = theta4;
opSpace = transformationM;
jointSpace = q;
opSpace = subs(opSpace,d1,q0(1));
opSpace = subs(opSpace,d3,q0(2));
opSpace = subs(opSpace,theta2,q0(3));
opSpace = subs(opSpace,theta4,q0(4));
x0 = opSpace * ee;
distance = norm(desiredSpace - x0);
% at this point, the results were good enough
t = jacobian(eeW,q);
y = pinv(t);
dq = y * x0;
q = q + dq;